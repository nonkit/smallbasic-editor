/*!
 * Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
import * as fs from "fs";
import * as os from "os";
import * as path from "path";
import * as child_process from "child_process";

const communicationFilePath = path.join(os.tmpdir(), `bridge-comm-${Math.random().toString().split(".")[1]}.json`);
const bridgeBinaryPath = path.resolve(__dirname, "_bridge", "SmallBasic.Bridge.dll");

(<any>global).Bridge = {
    Process: {
        OpenExternalLink: async (url: object): Promise<boolean> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(url));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Process", "OpenExternalLink", communicationFilePath]);
            return true;
        }
    },
    File: {
        AppendContents: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "AppendContents", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        CopyFile: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "CopyFile", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        CreateDirectory: async (directoryPath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(directoryPath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "CreateDirectory", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        DeleteDirectory: async (directoryPath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(directoryPath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "DeleteDirectory", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        DeleteFile: async (filePath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(filePath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "DeleteFile", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        GetDirectories: async (directoryPath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(directoryPath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "GetDirectories", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        GetFiles: async (directoryPath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(directoryPath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "GetFiles", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        GetTemporaryFilePath: async (): Promise<object> => {
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "GetTemporaryFilePath", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        InsertLine: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "InsertLine", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        ReadContents: async (filePath: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(filePath));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "ReadContents", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        ReadLine: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "ReadLine", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        WriteContents: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "WriteContents", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        WriteLine: async (args: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(args));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "File", "WriteLine", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        }
    },
    Network: {
        LoadImage: async (fileNameOrUrl: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(fileNameOrUrl));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Network", "LoadImage", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        DownloadFile: async (url: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(url));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Network", "DownloadFile", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        },
        GetWebPageContents: async (url: object): Promise<object> => {
            fs.writeFileSync(communicationFilePath, JSON.stringify(url));
            child_process.execFileSync("dotnet", [bridgeBinaryPath, "Network", "GetWebPageContents", communicationFilePath]);
            return JSON.parse(fs.readFileSync(communicationFilePath, "utf8"));
        }
    }
};
