/*!
 * Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>

/// <reference path="../node_modules/@dotnet/jsinterop/dist/Microsoft.JSInterop.d.ts" />

export module CSIntrop {
    export module Monaco {
        export function updateDiagnostics(code: string): Promise<monaco.IRange[]> {
            return DotNet.invokeMethodAsync<monaco.IRange[]>("SmallBasic.Editor", "CSIntrop.Monaco.UpdateDiagnostics", code);
        }

        export function provideCompletionItems(code: string, position: monaco.IPosition): Promise<monaco.languages.CompletionItem[]> {
            return DotNet.invokeMethodAsync<monaco.languages.CompletionItem[]>("SmallBasic.Editor", "CSIntrop.Monaco.ProvideCompletionItems", code, position);
        }

        export function provideHover(code: string, position: monaco.IPosition): Promise<string[]> {
            return DotNet.invokeMethodAsync<string[]>("SmallBasic.Editor", "CSIntrop.Monaco.ProvideHover", code, position);
        }
    }

    export module GraphicsDisplay {
        export function updateDisplayLocation(x: number, y: number): Promise<void> {
            return DotNet.invokeMethodAsync<boolean>("SmallBasic.Editor", "CSIntrop.GraphicsDisplay.UpdateDisplayLocation", x, y).then(() => {
                Promise.resolve();
            });
        }

        export function onKeyUp(key: string): Promise<void> {
            return DotNet.invokeMethodAsync<boolean>("SmallBasic.Editor", "CSIntrop.GraphicsDisplay.OnKeyUp", key).then(() => {
                Promise.resolve();
            });
        }

        export function onKeyDown(key: string): Promise<void> {
            return DotNet.invokeMethodAsync<boolean>("SmallBasic.Editor", "CSIntrop.GraphicsDisplay.OnKeyDown", key).then(() => {
                Promise.resolve();
            });
        }
    }
}
