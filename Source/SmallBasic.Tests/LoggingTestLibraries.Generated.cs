// <copyright file="LoggingTestLibraries.Generated.cs" company="MIT License">
// Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SmallBasic.Tests
{
    #pragma warning disable CS0067 // The event '{0}' is never used
    using System;
    using System.Text;
    using System.Threading.Tasks;
    using SmallBasic.Compiler.Runtime;

    internal sealed class LoggingArrayLibrary : IArrayLibrary
    {
        private readonly StringBuilder log;

        public LoggingArrayLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public bool ContainsIndex(ArrayValue array, string index)
        {
            this.log.AppendLine($"Array.ContainsIndex(array: '{array.ToDisplayString()}', index: '{index}')");
            return false;
        }

        public bool ContainsValue(ArrayValue array, string value)
        {
            this.log.AppendLine($"Array.ContainsValue(array: '{array.ToDisplayString()}', value: '{value}')");
            return false;
        }

        public ArrayValue GetAllIndices(ArrayValue array)
        {
            this.log.AppendLine($"Array.GetAllIndices(array: '{array.ToDisplayString()}')");
            return new ArrayValue();
        }

        public decimal GetItemCount(ArrayValue array)
        {
            this.log.AppendLine($"Array.GetItemCount(array: '{array.ToDisplayString()}')");
            return 0m;
        }

        public BaseValue GetValue(string arrayName, string index)
        {
            this.log.AppendLine($"Array.GetValue(arrayName: '{arrayName}', index: '{index}')");
            return StringValue.Create(string.Empty);
        }

        public bool IsArray(BaseValue array)
        {
            this.log.AppendLine($"Array.IsArray(array: '{array.ToDisplayString()}')");
            return false;
        }

        public void RemoveValue(string arrayName, string index)
        {
            this.log.AppendLine($"Array.RemoveValue(arrayName: '{arrayName}', index: '{index}')");
        }

        public void SetValue(string arrayName, string index, BaseValue value)
        {
            this.log.AppendLine($"Array.SetValue(arrayName: '{arrayName}', index: '{index}', value: '{value.ToDisplayString()}')");
        }
    }

    internal sealed class LoggingClockLibrary : IClockLibrary
    {
        private readonly StringBuilder log;

        public LoggingClockLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public string Get_Date()
        {
            this.log.AppendLine($"Clock.Get_Date()");
            return string.Empty;
        }

        public decimal Get_Day()
        {
            this.log.AppendLine($"Clock.Get_Day()");
            return 0m;
        }

        public decimal Get_ElapsedMilliseconds()
        {
            this.log.AppendLine($"Clock.Get_ElapsedMilliseconds()");
            return 0m;
        }

        public decimal Get_Hour()
        {
            this.log.AppendLine($"Clock.Get_Hour()");
            return 0m;
        }

        public decimal Get_Millisecond()
        {
            this.log.AppendLine($"Clock.Get_Millisecond()");
            return 0m;
        }

        public decimal Get_Minute()
        {
            this.log.AppendLine($"Clock.Get_Minute()");
            return 0m;
        }

        public decimal Get_Month()
        {
            this.log.AppendLine($"Clock.Get_Month()");
            return 0m;
        }

        public decimal Get_Second()
        {
            this.log.AppendLine($"Clock.Get_Second()");
            return 0m;
        }

        public string Get_Time()
        {
            this.log.AppendLine($"Clock.Get_Time()");
            return string.Empty;
        }

        public string Get_WeekDay()
        {
            this.log.AppendLine($"Clock.Get_WeekDay()");
            return string.Empty;
        }

        public decimal Get_Year()
        {
            this.log.AppendLine($"Clock.Get_Year()");
            return 0m;
        }
    }

    internal sealed class LoggingControlsLibrary : IControlsLibrary
    {
        private readonly StringBuilder log;

        public LoggingControlsLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public event Action ButtonClicked;

        public event Action TextTyped;

        public string Get_LastClickedButton()
        {
            this.log.AppendLine($"Controls.Get_LastClickedButton()");
            return string.Empty;
        }

        public string Get_LastTypedTextBox()
        {
            this.log.AppendLine($"Controls.Get_LastTypedTextBox()");
            return string.Empty;
        }

        public string AddButton(string caption, decimal left, decimal top)
        {
            this.log.AppendLine($"Controls.AddButton(caption: '{caption}', left: '{left}', top: '{top}')");
            return string.Empty;
        }

        public string AddMultiLineTextBox(decimal left, decimal top)
        {
            this.log.AppendLine($"Controls.AddMultiLineTextBox(left: '{left}', top: '{top}')");
            return string.Empty;
        }

        public string AddTextBox(decimal left, decimal top)
        {
            this.log.AppendLine($"Controls.AddTextBox(left: '{left}', top: '{top}')");
            return string.Empty;
        }

        public string GetButtonCaption(string buttonName)
        {
            this.log.AppendLine($"Controls.GetButtonCaption(buttonName: '{buttonName}')");
            return string.Empty;
        }

        public string GetTextBoxText(string textBoxName)
        {
            this.log.AppendLine($"Controls.GetTextBoxText(textBoxName: '{textBoxName}')");
            return string.Empty;
        }

        public void HideControl(string controlName)
        {
            this.log.AppendLine($"Controls.HideControl(controlName: '{controlName}')");
        }

        public void Move(string control, decimal x, decimal y)
        {
            this.log.AppendLine($"Controls.Move(control: '{control}', x: '{x}', y: '{y}')");
        }

        public void Remove(string controlName)
        {
            this.log.AppendLine($"Controls.Remove(controlName: '{controlName}')");
        }

        public void SetButtonCaption(string buttonName, string caption)
        {
            this.log.AppendLine($"Controls.SetButtonCaption(buttonName: '{buttonName}', caption: '{caption}')");
        }

        public void SetSize(string control, decimal width, decimal height)
        {
            this.log.AppendLine($"Controls.SetSize(control: '{control}', width: '{width}', height: '{height}')");
        }

        public void SetTextBoxText(string textBoxName, string text)
        {
            this.log.AppendLine($"Controls.SetTextBoxText(textBoxName: '{textBoxName}', text: '{text}')");
        }

        public void ShowControl(string controlName)
        {
            this.log.AppendLine($"Controls.ShowControl(controlName: '{controlName}')");
        }
    }

    internal sealed class LoggingDesktopLibrary : IDesktopLibrary
    {
        private readonly StringBuilder log;

        public LoggingDesktopLibrary(StringBuilder log)
        {
            this.log = log;
        }
    }

    internal sealed class LoggingDictionaryLibrary : IDictionaryLibrary
    {
        private readonly StringBuilder log;

        public LoggingDictionaryLibrary(StringBuilder log)
        {
            this.log = log;
        }
    }

    internal sealed class LoggingFileLibrary : IFileLibrary
    {
        private readonly StringBuilder log;

        public LoggingFileLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public string Get_LastError()
        {
            this.log.AppendLine($"File.Get_LastError()");
            return string.Empty;
        }

        public void Set_LastError(string value)
        {
            this.log.AppendLine($"File.Set_LastError('{value}')");
        }

        public Task<string> AppendContents(string filePath, string contents)
        {
            this.log.AppendLine($"File.AppendContents(filePath: '{filePath}', contents: '{contents}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> CopyFile(string sourceFilePath, string destinationFilePath)
        {
            this.log.AppendLine($"File.CopyFile(sourceFilePath: '{sourceFilePath}', destinationFilePath: '{destinationFilePath}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> CreateDirectory(string directoryPath)
        {
            this.log.AppendLine($"File.CreateDirectory(directoryPath: '{directoryPath}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> DeleteDirectory(string directoryPath)
        {
            this.log.AppendLine($"File.DeleteDirectory(directoryPath: '{directoryPath}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> DeleteFile(string filePath)
        {
            this.log.AppendLine($"File.DeleteFile(filePath: '{filePath}')");
            return Task.FromResult(string.Empty);
        }

        public Task<BaseValue> GetDirectories(string directoryPath)
        {
            this.log.AppendLine($"File.GetDirectories(directoryPath: '{directoryPath}')");
            return Task.FromResult(StringValue.Create(string.Empty));
        }

        public Task<BaseValue> GetFiles(string directoryPath)
        {
            this.log.AppendLine($"File.GetFiles(directoryPath: '{directoryPath}')");
            return Task.FromResult(StringValue.Create(string.Empty));
        }

        public Task<BaseValue> GetTemporaryFilePath()
        {
            this.log.AppendLine($"File.GetTemporaryFilePath()");
            return Task.FromResult(StringValue.Create(string.Empty));
        }

        public Task<string> InsertLine(string filePath, decimal lineNumber, string contents)
        {
            this.log.AppendLine($"File.InsertLine(filePath: '{filePath}', lineNumber: '{lineNumber}', contents: '{contents}')");
            return Task.FromResult(string.Empty);
        }

        public Task<BaseValue> ReadContents(string filePath)
        {
            this.log.AppendLine($"File.ReadContents(filePath: '{filePath}')");
            return Task.FromResult(StringValue.Create(string.Empty));
        }

        public Task<BaseValue> ReadLine(string filePath, decimal lineNumber)
        {
            this.log.AppendLine($"File.ReadLine(filePath: '{filePath}', lineNumber: '{lineNumber}')");
            return Task.FromResult(StringValue.Create(string.Empty));
        }

        public Task<string> WriteContents(string filePath, string contents)
        {
            this.log.AppendLine($"File.WriteContents(filePath: '{filePath}', contents: '{contents}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> WriteLine(string filePath, decimal lineNumber, string contents)
        {
            this.log.AppendLine($"File.WriteLine(filePath: '{filePath}', lineNumber: '{lineNumber}', contents: '{contents}')");
            return Task.FromResult(string.Empty);
        }
    }

    internal sealed class LoggingFlickrLibrary : IFlickrLibrary
    {
        private readonly StringBuilder log;

        public LoggingFlickrLibrary(StringBuilder log)
        {
            this.log = log;
        }
    }

    internal sealed class LoggingGraphicsWindowLibrary : IGraphicsWindowLibrary
    {
        private readonly StringBuilder log;

        public LoggingGraphicsWindowLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public event Action KeyDown;

        public event Action KeyUp;

        public event Action MouseDown;

        public event Action MouseMove;

        public event Action MouseUp;

        public event Action TextInput;

        public string Get_BackgroundColor()
        {
            this.log.AppendLine($"GraphicsWindow.Get_BackgroundColor()");
            return string.Empty;
        }

        public void Set_BackgroundColor(string value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_BackgroundColor('{value}')");
        }

        public string Get_BrushColor()
        {
            this.log.AppendLine($"GraphicsWindow.Get_BrushColor()");
            return string.Empty;
        }

        public void Set_BrushColor(string value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_BrushColor('{value}')");
        }

        public bool Get_FontBold()
        {
            this.log.AppendLine($"GraphicsWindow.Get_FontBold()");
            return false;
        }

        public void Set_FontBold(bool value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_FontBold('{value}')");
        }

        public bool Get_FontItalic()
        {
            this.log.AppendLine($"GraphicsWindow.Get_FontItalic()");
            return false;
        }

        public void Set_FontItalic(bool value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_FontItalic('{value}')");
        }

        public string Get_FontName()
        {
            this.log.AppendLine($"GraphicsWindow.Get_FontName()");
            return string.Empty;
        }

        public void Set_FontName(string value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_FontName('{value}')");
        }

        public decimal Get_FontSize()
        {
            this.log.AppendLine($"GraphicsWindow.Get_FontSize()");
            return 0m;
        }

        public void Set_FontSize(decimal value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_FontSize('{value}')");
        }

        public Task<decimal> Get_Height()
        {
            this.log.AppendLine($"GraphicsWindow.Get_Height()");
            return Task.FromResult(0m);
        }

        public string Get_LastKey()
        {
            this.log.AppendLine($"GraphicsWindow.Get_LastKey()");
            return string.Empty;
        }

        public string Get_LastText()
        {
            this.log.AppendLine($"GraphicsWindow.Get_LastText()");
            return string.Empty;
        }

        public decimal Get_MouseX()
        {
            this.log.AppendLine($"GraphicsWindow.Get_MouseX()");
            return 0m;
        }

        public decimal Get_MouseY()
        {
            this.log.AppendLine($"GraphicsWindow.Get_MouseY()");
            return 0m;
        }

        public string Get_PenColor()
        {
            this.log.AppendLine($"GraphicsWindow.Get_PenColor()");
            return string.Empty;
        }

        public void Set_PenColor(string value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_PenColor('{value}')");
        }

        public decimal Get_PenWidth()
        {
            this.log.AppendLine($"GraphicsWindow.Get_PenWidth()");
            return 0m;
        }

        public void Set_PenWidth(decimal value)
        {
            this.log.AppendLine($"GraphicsWindow.Set_PenWidth('{value}')");
        }

        public Task<decimal> Get_Width()
        {
            this.log.AppendLine($"GraphicsWindow.Get_Width()");
            return Task.FromResult(0m);
        }

        public void Clear()
        {
            this.log.AppendLine($"GraphicsWindow.Clear()");
        }

        public void DrawBoundText(decimal x, decimal y, decimal width, string text)
        {
            this.log.AppendLine($"GraphicsWindow.DrawBoundText(x: '{x}', y: '{y}', width: '{width}', text: '{text}')");
        }

        public void DrawEllipse(decimal x, decimal y, decimal width, decimal height)
        {
            this.log.AppendLine($"GraphicsWindow.DrawEllipse(x: '{x}', y: '{y}', width: '{width}', height: '{height}')");
        }

        public void DrawImage(string imageName, decimal x, decimal y)
        {
            this.log.AppendLine($"GraphicsWindow.DrawImage(imageName: '{imageName}', x: '{x}', y: '{y}')");
        }

        public void DrawLine(decimal x1, decimal y1, decimal x2, decimal y2)
        {
            this.log.AppendLine($"GraphicsWindow.DrawLine(x1: '{x1}', y1: '{y1}', x2: '{x2}', y2: '{y2}')");
        }

        public void DrawRectangle(decimal x, decimal y, decimal width, decimal height)
        {
            this.log.AppendLine($"GraphicsWindow.DrawRectangle(x: '{x}', y: '{y}', width: '{width}', height: '{height}')");
        }

        public void DrawResizedImage(string imageName, decimal x, decimal y, decimal width, decimal height)
        {
            this.log.AppendLine($"GraphicsWindow.DrawResizedImage(imageName: '{imageName}', x: '{x}', y: '{y}', width: '{width}', height: '{height}')");
        }

        public void DrawText(decimal x, decimal y, string text)
        {
            this.log.AppendLine($"GraphicsWindow.DrawText(x: '{x}', y: '{y}', text: '{text}')");
        }

        public void DrawTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3)
        {
            this.log.AppendLine($"GraphicsWindow.DrawTriangle(x1: '{x1}', y1: '{y1}', x2: '{x2}', y2: '{y2}', x3: '{x3}', y3: '{y3}')");
        }

        public void FillEllipse(decimal x, decimal y, decimal width, decimal height)
        {
            this.log.AppendLine($"GraphicsWindow.FillEllipse(x: '{x}', y: '{y}', width: '{width}', height: '{height}')");
        }

        public void FillRectangle(decimal x, decimal y, decimal width, decimal height)
        {
            this.log.AppendLine($"GraphicsWindow.FillRectangle(x: '{x}', y: '{y}', width: '{width}', height: '{height}')");
        }

        public void FillTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3)
        {
            this.log.AppendLine($"GraphicsWindow.FillTriangle(x1: '{x1}', y1: '{y1}', x2: '{x2}', y2: '{y2}', x3: '{x3}', y3: '{y3}')");
        }

        public string GetColorFromRGB(decimal red, decimal green, decimal blue)
        {
            this.log.AppendLine($"GraphicsWindow.GetColorFromRGB(red: '{red}', green: '{green}', blue: '{blue}')");
            return string.Empty;
        }

        public string GetRandomColor()
        {
            this.log.AppendLine($"GraphicsWindow.GetRandomColor()");
            return string.Empty;
        }

        public void Hide()
        {
            this.log.AppendLine($"GraphicsWindow.Hide()");
        }

        public void SetPixel(decimal x, decimal y, string color)
        {
            this.log.AppendLine($"GraphicsWindow.SetPixel(x: '{x}', y: '{y}', color: '{color}')");
        }

        public void Show()
        {
            this.log.AppendLine($"GraphicsWindow.Show()");
        }

        public Task ShowMessage(string text, string title)
        {
            this.log.AppendLine($"GraphicsWindow.ShowMessage(text: '{text}', title: '{title}')");
            return Task.CompletedTask;
        }
    }

    internal sealed class LoggingImageListLibrary : IImageListLibrary
    {
        private readonly StringBuilder log;

        public LoggingImageListLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public decimal GetHeightOfImage(string imageName)
        {
            this.log.AppendLine($"ImageList.GetHeightOfImage(imageName: '{imageName}')");
            return 0m;
        }

        public decimal GetWidthOfImage(string imageName)
        {
            this.log.AppendLine($"ImageList.GetWidthOfImage(imageName: '{imageName}')");
            return 0m;
        }

        public Task<string> LoadImage(string fileNameOrUrl)
        {
            this.log.AppendLine($"ImageList.LoadImage(fileNameOrUrl: '{fileNameOrUrl}')");
            return Task.FromResult(string.Empty);
        }
    }

    internal sealed class LoggingMathLibrary : IMathLibrary
    {
        private readonly StringBuilder log;

        public LoggingMathLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public decimal Get_Pi()
        {
            this.log.AppendLine($"Math.Get_Pi()");
            return 0m;
        }

        public decimal Abs(decimal number)
        {
            this.log.AppendLine($"Math.Abs(number: '{number}')");
            return 0m;
        }

        public decimal ArcCos(decimal cosValue)
        {
            this.log.AppendLine($"Math.ArcCos(cosValue: '{cosValue}')");
            return 0m;
        }

        public decimal ArcSin(decimal sinValue)
        {
            this.log.AppendLine($"Math.ArcSin(sinValue: '{sinValue}')");
            return 0m;
        }

        public decimal ArcTan(decimal tanValue)
        {
            this.log.AppendLine($"Math.ArcTan(tanValue: '{tanValue}')");
            return 0m;
        }

        public decimal Ceiling(decimal number)
        {
            this.log.AppendLine($"Math.Ceiling(number: '{number}')");
            return 0m;
        }

        public decimal Cos(decimal angle)
        {
            this.log.AppendLine($"Math.Cos(angle: '{angle}')");
            return 0m;
        }

        public decimal Floor(decimal number)
        {
            this.log.AppendLine($"Math.Floor(number: '{number}')");
            return 0m;
        }

        public decimal GetDegrees(decimal angle)
        {
            this.log.AppendLine($"Math.GetDegrees(angle: '{angle}')");
            return 0m;
        }

        public decimal GetRadians(decimal angle)
        {
            this.log.AppendLine($"Math.GetRadians(angle: '{angle}')");
            return 0m;
        }

        public decimal GetRandomNumber(decimal maxNumber)
        {
            this.log.AppendLine($"Math.GetRandomNumber(maxNumber: '{maxNumber}')");
            return 0m;
        }

        public decimal Log(decimal number)
        {
            this.log.AppendLine($"Math.Log(number: '{number}')");
            return 0m;
        }

        public decimal Max(decimal number1, decimal number2)
        {
            this.log.AppendLine($"Math.Max(number1: '{number1}', number2: '{number2}')");
            return 0m;
        }

        public decimal Min(decimal number1, decimal number2)
        {
            this.log.AppendLine($"Math.Min(number1: '{number1}', number2: '{number2}')");
            return 0m;
        }

        public decimal NaturalLog(decimal number)
        {
            this.log.AppendLine($"Math.NaturalLog(number: '{number}')");
            return 0m;
        }

        public decimal Power(decimal baseNumber, decimal exponent)
        {
            this.log.AppendLine($"Math.Power(baseNumber: '{baseNumber}', exponent: '{exponent}')");
            return 0m;
        }

        public decimal Remainder(decimal dividend, decimal divisor)
        {
            this.log.AppendLine($"Math.Remainder(dividend: '{dividend}', divisor: '{divisor}')");
            return 0m;
        }

        public decimal Round(decimal number)
        {
            this.log.AppendLine($"Math.Round(number: '{number}')");
            return 0m;
        }

        public decimal Sin(decimal angle)
        {
            this.log.AppendLine($"Math.Sin(angle: '{angle}')");
            return 0m;
        }

        public decimal SquareRoot(decimal number)
        {
            this.log.AppendLine($"Math.SquareRoot(number: '{number}')");
            return 0m;
        }

        public decimal Tan(decimal angle)
        {
            this.log.AppendLine($"Math.Tan(angle: '{angle}')");
            return 0m;
        }
    }

    internal sealed class LoggingMouseLibrary : IMouseLibrary
    {
        private readonly StringBuilder log;

        public LoggingMouseLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public bool Get_IsLeftButtonDown()
        {
            this.log.AppendLine($"Mouse.Get_IsLeftButtonDown()");
            return false;
        }

        public bool Get_IsRightButtonDown()
        {
            this.log.AppendLine($"Mouse.Get_IsRightButtonDown()");
            return false;
        }

        public decimal Get_MouseX()
        {
            this.log.AppendLine($"Mouse.Get_MouseX()");
            return 0m;
        }

        public decimal Get_MouseY()
        {
            this.log.AppendLine($"Mouse.Get_MouseY()");
            return 0m;
        }

        public void HideCursor()
        {
            this.log.AppendLine($"Mouse.HideCursor()");
        }

        public void ShowCursor()
        {
            this.log.AppendLine($"Mouse.ShowCursor()");
        }
    }

    internal sealed class LoggingNetworkLibrary : INetworkLibrary
    {
        private readonly StringBuilder log;

        public LoggingNetworkLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public Task<string> DownloadFile(string url)
        {
            this.log.AppendLine($"Network.DownloadFile(url: '{url}')");
            return Task.FromResult(string.Empty);
        }

        public Task<string> GetWebPageContents(string url)
        {
            this.log.AppendLine($"Network.GetWebPageContents(url: '{url}')");
            return Task.FromResult(string.Empty);
        }
    }

    internal sealed class LoggingProgramLibrary : IProgramLibrary
    {
        private readonly StringBuilder log;

        public LoggingProgramLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public Task Delay(decimal milliSeconds)
        {
            this.log.AppendLine($"Program.Delay(milliSeconds: '{milliSeconds}')");
            return Task.CompletedTask;
        }

        public void End()
        {
            this.log.AppendLine($"Program.End()");
        }

        public void Pause()
        {
            this.log.AppendLine($"Program.Pause()");
        }
    }

    internal sealed class LoggingShapesLibrary : IShapesLibrary
    {
        private readonly StringBuilder log;

        public LoggingShapesLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public string AddEllipse(decimal width, decimal height)
        {
            this.log.AppendLine($"Shapes.AddEllipse(width: '{width}', height: '{height}')");
            return string.Empty;
        }

        public string AddImage(string imageName)
        {
            this.log.AppendLine($"Shapes.AddImage(imageName: '{imageName}')");
            return string.Empty;
        }

        public string AddLine(decimal x1, decimal y1, decimal x2, decimal y2)
        {
            this.log.AppendLine($"Shapes.AddLine(x1: '{x1}', y1: '{y1}', x2: '{x2}', y2: '{y2}')");
            return string.Empty;
        }

        public string AddRectangle(decimal width, decimal height)
        {
            this.log.AppendLine($"Shapes.AddRectangle(width: '{width}', height: '{height}')");
            return string.Empty;
        }

        public string AddText(string text)
        {
            this.log.AppendLine($"Shapes.AddText(text: '{text}')");
            return string.Empty;
        }

        public string AddTriangle(decimal x1, decimal y1, decimal x2, decimal y2, decimal x3, decimal y3)
        {
            this.log.AppendLine($"Shapes.AddTriangle(x1: '{x1}', y1: '{y1}', x2: '{x2}', y2: '{y2}', x3: '{x3}', y3: '{y3}')");
            return string.Empty;
        }

        public Task Animate(string shapeName, decimal x, decimal y, decimal duration)
        {
            this.log.AppendLine($"Shapes.Animate(shapeName: '{shapeName}', x: '{x}', y: '{y}', duration: '{duration}')");
            return Task.CompletedTask;
        }

        public decimal GetLeft(string shapeName)
        {
            this.log.AppendLine($"Shapes.GetLeft(shapeName: '{shapeName}')");
            return 0m;
        }

        public decimal GetOpacity(string shapeName)
        {
            this.log.AppendLine($"Shapes.GetOpacity(shapeName: '{shapeName}')");
            return 0m;
        }

        public decimal GetTop(string shapeName)
        {
            this.log.AppendLine($"Shapes.GetTop(shapeName: '{shapeName}')");
            return 0m;
        }

        public void HideShape(string shapeName)
        {
            this.log.AppendLine($"Shapes.HideShape(shapeName: '{shapeName}')");
        }

        public void Move(string shapeName, decimal x, decimal y)
        {
            this.log.AppendLine($"Shapes.Move(shapeName: '{shapeName}', x: '{x}', y: '{y}')");
        }

        public void Remove(string shapeName)
        {
            this.log.AppendLine($"Shapes.Remove(shapeName: '{shapeName}')");
        }

        public void Rotate(string shapeName, decimal angle)
        {
            this.log.AppendLine($"Shapes.Rotate(shapeName: '{shapeName}', angle: '{angle}')");
        }

        public void SetOpacity(string shapeName, decimal level)
        {
            this.log.AppendLine($"Shapes.SetOpacity(shapeName: '{shapeName}', level: '{level}')");
        }

        public void SetText(string shapeName, string text)
        {
            this.log.AppendLine($"Shapes.SetText(shapeName: '{shapeName}', text: '{text}')");
        }

        public void ShowShape(string shapeName)
        {
            this.log.AppendLine($"Shapes.ShowShape(shapeName: '{shapeName}')");
        }

        public void Zoom(string shapeName, decimal scaleX, decimal scaleY)
        {
            this.log.AppendLine($"Shapes.Zoom(shapeName: '{shapeName}', scaleX: '{scaleX}', scaleY: '{scaleY}')");
        }
    }

    internal sealed class LoggingSoundLibrary : ISoundLibrary
    {
        private readonly StringBuilder log;

        public LoggingSoundLibrary(StringBuilder log)
        {
            this.log = log;
        }
    }

    internal sealed class LoggingStackLibrary : IStackLibrary
    {
        private readonly StringBuilder log;

        public LoggingStackLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public decimal GetCount(string stackName)
        {
            this.log.AppendLine($"Stack.GetCount(stackName: '{stackName}')");
            return 0m;
        }

        public string PopValue(string stackName)
        {
            this.log.AppendLine($"Stack.PopValue(stackName: '{stackName}')");
            return string.Empty;
        }

        public void PushValue(string stackName, string value)
        {
            this.log.AppendLine($"Stack.PushValue(stackName: '{stackName}', value: '{value}')");
        }
    }

    internal sealed class LoggingTextLibrary : ITextLibrary
    {
        private readonly StringBuilder log;

        public LoggingTextLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public string Append(string text1, string text2)
        {
            this.log.AppendLine($"Text.Append(text1: '{text1}', text2: '{text2}')");
            return string.Empty;
        }

        public string ConvertToLowerCase(string text)
        {
            this.log.AppendLine($"Text.ConvertToLowerCase(text: '{text}')");
            return string.Empty;
        }

        public string ConvertToUpperCase(string text)
        {
            this.log.AppendLine($"Text.ConvertToUpperCase(text: '{text}')");
            return string.Empty;
        }

        public bool EndsWith(string text, string subText)
        {
            this.log.AppendLine($"Text.EndsWith(text: '{text}', subText: '{subText}')");
            return false;
        }

        public string GetCharacter(decimal characterCode)
        {
            this.log.AppendLine($"Text.GetCharacter(characterCode: '{characterCode}')");
            return string.Empty;
        }

        public decimal GetCharacterCode(string character)
        {
            this.log.AppendLine($"Text.GetCharacterCode(character: '{character}')");
            return 0m;
        }

        public decimal GetIndexOf(string text, string subText)
        {
            this.log.AppendLine($"Text.GetIndexOf(text: '{text}', subText: '{subText}')");
            return 0m;
        }

        public decimal GetLength(string text)
        {
            this.log.AppendLine($"Text.GetLength(text: '{text}')");
            return 0m;
        }

        public string GetSubText(string text, decimal start, decimal length)
        {
            this.log.AppendLine($"Text.GetSubText(text: '{text}', start: '{start}', length: '{length}')");
            return string.Empty;
        }

        public string GetSubTextToEnd(string text, decimal start)
        {
            this.log.AppendLine($"Text.GetSubTextToEnd(text: '{text}', start: '{start}')");
            return string.Empty;
        }

        public bool IsSubText(string text, string subText)
        {
            this.log.AppendLine($"Text.IsSubText(text: '{text}', subText: '{subText}')");
            return false;
        }

        public bool StartsWith(string text, string subText)
        {
            this.log.AppendLine($"Text.StartsWith(text: '{text}', subText: '{subText}')");
            return false;
        }
    }

    internal sealed class LoggingTextWindowLibrary : ITextWindowLibrary
    {
        private readonly StringBuilder log;

        public LoggingTextWindowLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public string Get_BackgroundColor()
        {
            this.log.AppendLine($"TextWindow.Get_BackgroundColor()");
            return string.Empty;
        }

        public void Set_BackgroundColor(string value)
        {
            this.log.AppendLine($"TextWindow.Set_BackgroundColor('{value}')");
        }

        public string Get_ForegroundColor()
        {
            this.log.AppendLine($"TextWindow.Get_ForegroundColor()");
            return string.Empty;
        }

        public void Set_ForegroundColor(string value)
        {
            this.log.AppendLine($"TextWindow.Set_ForegroundColor('{value}')");
        }

        public void Clear()
        {
            this.log.AppendLine($"TextWindow.Clear()");
        }

        public string Read()
        {
            this.log.AppendLine($"TextWindow.Read()");
            return string.Empty;
        }

        public decimal ReadNumber()
        {
            this.log.AppendLine($"TextWindow.ReadNumber()");
            return 0m;
        }

        public Task Write(string data)
        {
            this.log.AppendLine($"TextWindow.Write(data: '{data}')");
            return Task.CompletedTask;
        }

        public Task WriteLine(string data)
        {
            this.log.AppendLine($"TextWindow.WriteLine(data: '{data}')");
            return Task.CompletedTask;
        }
    }

    internal sealed class LoggingTimerLibrary : ITimerLibrary
    {
        private readonly StringBuilder log;

        public LoggingTimerLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public event Action Tick;

        public decimal Get_Interval()
        {
            this.log.AppendLine($"Timer.Get_Interval()");
            return 0m;
        }

        public void Set_Interval(decimal value)
        {
            this.log.AppendLine($"Timer.Set_Interval('{value}')");
        }

        public void Pause()
        {
            this.log.AppendLine($"Timer.Pause()");
        }

        public void Resume()
        {
            this.log.AppendLine($"Timer.Resume()");
        }
    }

    internal sealed class LoggingTurtleLibrary : ITurtleLibrary
    {
        private readonly StringBuilder log;

        public LoggingTurtleLibrary(StringBuilder log)
        {
            this.log = log;
        }

        public decimal Get_Angle()
        {
            this.log.AppendLine($"Turtle.Get_Angle()");
            return 0m;
        }

        public void Set_Angle(decimal value)
        {
            this.log.AppendLine($"Turtle.Set_Angle('{value}')");
        }

        public decimal Get_Speed()
        {
            this.log.AppendLine($"Turtle.Get_Speed()");
            return 0m;
        }

        public void Set_Speed(decimal value)
        {
            this.log.AppendLine($"Turtle.Set_Speed('{value}')");
        }

        public decimal Get_X()
        {
            this.log.AppendLine($"Turtle.Get_X()");
            return 0m;
        }

        public void Set_X(decimal value)
        {
            this.log.AppendLine($"Turtle.Set_X('{value}')");
        }

        public decimal Get_Y()
        {
            this.log.AppendLine($"Turtle.Get_Y()");
            return 0m;
        }

        public void Set_Y(decimal value)
        {
            this.log.AppendLine($"Turtle.Set_Y('{value}')");
        }

        public void Hide()
        {
            this.log.AppendLine($"Turtle.Hide()");
        }

        public Task Move(decimal distance)
        {
            this.log.AppendLine($"Turtle.Move(distance: '{distance}')");
            return Task.CompletedTask;
        }

        public Task MoveTo(decimal x, decimal y)
        {
            this.log.AppendLine($"Turtle.MoveTo(x: '{x}', y: '{y}')");
            return Task.CompletedTask;
        }

        public void PenDown()
        {
            this.log.AppendLine($"Turtle.PenDown()");
        }

        public void PenUp()
        {
            this.log.AppendLine($"Turtle.PenUp()");
        }

        public void Show()
        {
            this.log.AppendLine($"Turtle.Show()");
        }

        public Task Turn(decimal angle)
        {
            this.log.AppendLine($"Turtle.Turn(angle: '{angle}')");
            return Task.CompletedTask;
        }

        public Task TurnLeft()
        {
            this.log.AppendLine($"Turtle.TurnLeft()");
            return Task.CompletedTask;
        }

        public Task TurnRight()
        {
            this.log.AppendLine($"Turtle.TurnRight()");
            return Task.CompletedTask;
        }
    }

    internal sealed class LoggingEngineLibraries : IEngineLibraries
    {
        public LoggingEngineLibraries(StringBuilder log)
        {
            this.Array = new LoggingArrayLibrary(log);
            this.Clock = new LoggingClockLibrary(log);
            this.Controls = new LoggingControlsLibrary(log);
            this.Desktop = new LoggingDesktopLibrary(log);
            this.Dictionary = new LoggingDictionaryLibrary(log);
            this.File = new LoggingFileLibrary(log);
            this.Flickr = new LoggingFlickrLibrary(log);
            this.GraphicsWindow = new LoggingGraphicsWindowLibrary(log);
            this.ImageList = new LoggingImageListLibrary(log);
            this.Math = new LoggingMathLibrary(log);
            this.Mouse = new LoggingMouseLibrary(log);
            this.Network = new LoggingNetworkLibrary(log);
            this.Program = new LoggingProgramLibrary(log);
            this.Shapes = new LoggingShapesLibrary(log);
            this.Sound = new LoggingSoundLibrary(log);
            this.Stack = new LoggingStackLibrary(log);
            this.Text = new LoggingTextLibrary(log);
            this.TextWindow = new LoggingTextWindowLibrary(log);
            this.Timer = new LoggingTimerLibrary(log);
            this.Turtle = new LoggingTurtleLibrary(log);
        }

        public IArrayLibrary Array { get; private set; }

        public IClockLibrary Clock { get; private set; }

        public IControlsLibrary Controls { get; private set; }

        public IDesktopLibrary Desktop { get; private set; }

        public IDictionaryLibrary Dictionary { get; private set; }

        public IFileLibrary File { get; private set; }

        public IFlickrLibrary Flickr { get; private set; }

        public IGraphicsWindowLibrary GraphicsWindow { get; private set; }

        public IImageListLibrary ImageList { get; private set; }

        public IMathLibrary Math { get; private set; }

        public IMouseLibrary Mouse { get; private set; }

        public INetworkLibrary Network { get; private set; }

        public IProgramLibrary Program { get; private set; }

        public IShapesLibrary Shapes { get; private set; }

        public ISoundLibrary Sound { get; private set; }

        public IStackLibrary Stack { get; private set; }

        public ITextLibrary Text { get; private set; }

        public ITextWindowLibrary TextWindow { get; private set; }

        public ITimerLibrary Timer { get; private set; }

        public ITurtleLibrary Turtle { get; private set; }
    }

    #pragma warning restore CS0067 // The event '{0}' is never used
}
